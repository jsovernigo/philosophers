*************************************************
Julian Sovernigo            0948924
gsoverni@mail.uoguelph.ca
CIS3110_W17                 A2: philosophers and
3/27/2017						memory.
*************************************************

******************
Pledge of Honesty
******************
    By handing in this assignment with this README file, I assert that I 
have sole access and control over my submission, and that this submission 
contains entirely my own work. I affirm that I have not colaborated in the 
creation of this code, nor have I taken any segment of code that I do not 
have express ownership or permission to use.

************
Compilation
************

1- cd to the root folder of the program
2- type 'make' in the root folder.
3- to remove resources generated by compilation, please type 'make clean'

********************
Running the program
********************

1- cd to the root folder of the program
2- use:
	a- ./dine <philosophers> <meals>
	b- ./holes <filename>

********************
Program Description
********************

	The program's algorith follows the following proceedure:

DINE:
	this program essentially uses mutexes to lock the forks that the diners
will use to eat. Each diner needs 2 forks to eat.  Basically, the diner 
will lock their own fork, then their subsequent neighbour's fork as well.
Since the threads are offset from the start, it means that they will be in
synchronization when the actual reservation occurs (of forks).

	Unfortunately, due to a really frustrating diamond dependency in the
pthread library, the associated arrays of pthreads, mutexes, and meal 
counts must be set as global.

HOLES:
	The data types that are used to represent memory are fairly simple.  
The memory itself is actually stored in a non-string character array, which
allows us to store empty cells in '0', and the pid as as simple character.
The processes themselves are stored in structs, which contain their pids,
their size, loaded time, and number of swaps to present.  The processes
themselves are stored in a vector ADT, which is given queue properties
through pop and append commands.

	The four methodologies are specified by the assignment, and information for them should be aquired there.

